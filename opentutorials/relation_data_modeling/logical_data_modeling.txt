[논리적 데이터 모델링]
- 개념적 데이터 모델링이 잘 되어있다면, 논리적 데이터 모델링은 기계적인 일이다.
- 개념적 데이터 모델링으로 뽑아낸 개념을 관계형 DB 페러다임에 어울리게 데이터 형식을 잘 정리정돈 하는 일.

*Mapping Rule
⇒ ERD를 통해서 표현한 내용을 관계형 DB에 맞는 형식으로 전환하는데 사용하는 방법론.
  ↳ □ Entity      →  Table
    ○ Attrivute   →  Coloumn
    ◇ Relation    →  PK, FK

- 1:N 관계의 처리
⇒ 혼자서도 잘 지내는 FK가 없는 Table(Entity)부터 만들기

- N:M 관계의 처리
⇒ 어느 한 쪽에 Coloumn을 추가하기가 애매하다.
   ex.
      kim / MySQL | SQL Server | Oracle
      lee / MySQL | SQL Server

      author TABLE에 topic_id Coloumn을 추가 한다면,
      +----+------------+-------------------+----------+
      | id | name       | profile           | topic_id |
      +----+------------+-------------------+----------+
      |  1 | kim        | developer         |    1,2,3 |
      |  2 | Oracle     | designer          |      1,3 |
      |  3 | park       | planner           |          |
      +----+------------+-------------------+----------+

      topic TABLE에 author_id Coloumn을 추가 한다면,
      +----+------------+-------------------+---------------------+-----------+
      | id | title      | description       | created             | author_id |
      +----+------------+-------------------+---------------------+-----------+
      |  1 | MySQL      | MySQL is ...      | 2018-01-01 12:10:11 |       1,2 |
      |  2 | Oracle     | Oracle is ...     | 2018-01-03 13:01:10 |         1 |
      |  3 | SQL Server | SQL Server is ... | 2018-01-20 11:01:10 |       1,2 |
      |  4 | PostgreSQL | PostgreSQL is ... | 2018-01-23 01:03:03 |           |
      |  5 | MongoDB    | MongoDB is ...    | 2018-01-30 12:31:03 |           |
      +----+------------+-------------------+---------------------+-----------+

⇒ Mapping TABLE이 필요하다. (중재자, =연결 테이블)
   Mapping TABLE을 ERD(필요 시)와 schema에도 추가해주기
   ex.
      Mapping TABLE인 write TABLE
      +----+-----------+----------+---------------------+
      | id | author_id | topic_id | created             |
      +----+-----------+----------+---------------------+
      |  1 |         1 |        1 | 2018-01-01 12:10:11 |
      |  2 |         1 |        2 | 2018-01-03 13:01:10 |
      |  3 |         1 |        3 | 2018-01-20 11:01:10 |
      |  4 |         2 |        1 | 2018-01-23 01:03:03 |
      |  5 |         2 |        3 | 2018-01-30 12:31:03 |
      +----+-----------+----------+---------------------+



*정규화 (Normalization)
⇒ 정제되지 않은 데이터를(표를) 관계형 DB에 어울리는 표로 만들어주는 레시피.

- UNF (Unnormalized Form : 정규화가 적용되어 있지 않은 표)
- 1NF (First Normal Form : 제 1정규화)
  ... 제 n정규화가 높아질 수록 하나씩 정규화 조건이 만족된다. (정규화 표 검색하여 참고)
↳ 산업적으로는 3NF (제 3정규화)까지가 많이 사용되고 그 뒤에는 학술적으로 사용이 된다.

(수업 자료: http://bit.ly/2wV2SFj)

- 1NF
   제 1정규화의 원칙은 Atomic columns (: 각 column의 값이 atomic 해야한다. = 원자적이여야 한다.)
   = column의 값이 1,2와 같이 여러 개로 되어있으면 안 되고 하나의 값만 가져야 한다는 것.
   ↳ 위 Mapping Rule 필기 내용에서의 Mapping TABLE을 적용시켜줘야 한다.
   ex.
      topic TABLE  (title과 type을 묶은 값이 PK)
      +------------+---------+-------------------+---------------------+-----------+-------------+-------------------+----------+-----------------+
      | title      | type    | description       | created             | author_id | author_name | author_profile    | price    | tag             |
      +------------+---------+-------------------+---------------------+-----------+-------------+-------------------+----------+-----------------+
      | MySQL      | paper   | MySQL is ...      | 2018-01-01 12:10:11 |         1 | kim         | developer         | 10000    | rdb, free       |
      | MySQL      | online  | MySQL is ...      | 2018-01-01 12:10:11 |         1 | kim         | developer         |          | rdb, free       |
      | Oracle     | online  | Oracle is ...     | 2018-01-03 13:01:10 |         1 | kim         | developer         |          | rdb, commercial |
      +------------+---------+-------------------+---------------------+-----------+-------------+-------------------+----------+-----------------+

         ⇓ 1NF 적용 ⇓

      topic TABLE
      +------------+---------+-------------------+---------------------+-----------+-------------+-------------------+----------+
      | title      | type    | description       | created             | author_id | author_name | author_profile    | price    |
      +------------+---------+-------------------+---------------------+-----------+-------------+-------------------+----------+
      | MySQL      | paper   | MySQL is ...      | 2018-01-01 12:10:11 |         1 | kim         | developer         | 10000    |
      | MySQL      | online  | MySQL is ...      | 2018-01-01 12:10:11 |         1 | kim         | developer         |          |
      | Oracle     | online  | Oracle is ...     | 2018-01-03 13:01:10 |         1 | kim         | developer         |          |
      +------------+---------+-------------------+---------------------+-----------+-------------+-------------------+----------+

      topic_tag_relation (Mapping TABLE)
      +-------------+---------+
      | topic_title | tag_id  |
      +-------------+---------+
      | MySQL       |       1 |
      | MySQL       |       2 |
      | Oracle      |       1 |
      | Oracle      |       3 |
      +-------------+---------+

      tag TABLE
      +----+-------------+
      | id | name        |
      +----+-------------+
      |  1 | rdb         |
      |  2 | free        |
      |  3 | commercial  |
      +----+-------------+

- 2NF
   제 2정규화의 원칙은 No partial dependencies (: 부분 종속성이 없어야 한다. = 갖고 있는 표의 기본키 중에 중복키가 없어야 한다.)
   ex.
         ⇓ 2NF 적용 ⇓

      topic TABLE
      +------------+-------------------+---------------------+-----------+-------------+-------------------+
      | title      | description       | created             | author_id | author_name | author_profile    |
      +------------+-------------------+---------------------+-----------+-------------+-------------------+
      | MySQL      | MySQL is ...      | 2018-01-01 12:10:11 |         1 | kim         | developer         |
      | Oracle     | Oracle is ...     | 2018-01-03 13:01:10 |         1 | kim         | developer         |
      +------------+-------------------+---------------------+-----------+-------------+-------------------+

      topic_type TABLE
      +------------+---------+----------+
      | title      | type    | price    |
      +------------+---------+----------+
      | MySQL      | paper   | 10000    |
      | MySQL      | online  |          |
      | Oracle     | online  |          |
      +------------+---------+----------+
      
      topic_tag_relation (Mapping TABLE) & tag TABLE 은 동일.

- 3NF
   제 3정규화의 원칙은 No transitive dependencies (: 이행적 종속성이 없어야 한다.)\
   ex.
         ⇓ 3NF 적용 ⇓

      topic TABLE
      +------------+-------------------+---------------------+-----------+
      | title      | description       | created             | author_id |
      +------------+-------------------+---------------------+-----------+
      | MySQL      | MySQL is ...      | 2018-01-01 12:10:11 |         1 |
      | Oracle     | Oracle is ...     | 2018-01-03 13:01:10 |         1 |
      +------------+-------------------+---------------------+-----------+

      author TABLE
      +----+-------------+-------------------+
      | id | author_name | author_profile    |
      +----+-------------+-------------------+
      |  1 | kim         | developer         |
      +----+-------------+-------------------+

      topic_type TABLE & topic_tag_relation (Mapping TABLE) & tag TABLE 은 동일.
